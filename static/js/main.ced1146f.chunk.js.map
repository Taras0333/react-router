{"version":3,"sources":["logo.svg","signUp/signUp-render.js","signIn/signIn-render.js","form/form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SignUpRender","props","className","id","type","placeholder","onChange","name","required","sureName","email","password","to","activeClassName","onClick","btn","SignInRender","button","SignUp","state","saveName","e","document","querySelector","word","target","value","length","style","setState","saveSureName","surename","saveEmail","isEmail","test","savePassword","isPassword","saveLocal","localState","JSON","stringify","localStorage","setItem","isActive","getEmail","email2","getPassword","password2","validation","local","parse","getItem","alert","exact","path","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","component","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,8MC+E5BC,EA3EM,SAACC,GAAD,OACnB,yBAAKC,UAAU,OAAOC,GAAG,QACvB,yBAAKD,UAAU,WACb,yBAAKA,UAAU,gBACf,0BAAMA,UAAU,SAAhB,YAEF,yBAAKA,UAAU,WACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,eACb,2BACEE,KAAK,OACLF,UAAU,oBACVG,YAAY,cACZC,SAAUL,EAAMM,KAChBC,UAAQ,KAGZ,yBAAKN,UAAU,gBACb,2BACEE,KAAK,OACLF,UAAU,wBACVG,YAAY,aACZC,SAAUL,EAAMQ,SAChBD,UAAQ,MAId,yBAAKN,UAAU,eACb,2BACEE,KAAK,QACLF,UAAU,mBACVG,YAAY,iBACZC,SAAUL,EAAMS,MAChBF,UAAQ,KAGZ,yBAAKN,UAAU,gBACb,2BACEE,KAAK,WACLF,UAAU,sBACVG,YAAY,YACZC,SAAUL,EAAMU,SAChBH,UAAQ,MAId,yBAAKN,UAAU,WACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,iBACb,2BAAOE,KAAK,WAAWF,UAAU,oBAEnC,yBAAKA,UAAU,wBACb,yEAEE,6BAFF,uCAOJ,kBAAC,IAAD,CAASU,GAAG,SAASC,gBAAgB,UACnC,4BAAQX,UAAU,MAAMY,QAASb,EAAMc,KAAvC,YAKF,yBAAKb,UAAU,gBACb,0BAAMA,UAAU,iBAAhB,qCAEF,yBAAKA,UAAU,eACZ,IACD,0BAAMA,UAAU,cAAhB,yCCpBOc,G,MAlDM,SAACf,GAAD,OACnB,yBAAKC,UAAU,eACZ,IACD,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,gBACf,0BAAMA,UAAU,SAAhB,YACK,IACP,yBAAKA,UAAU,eACb,2BACEE,KAAK,QACLF,UAAU,gBACVG,YAAY,iBACZC,SAAUL,EAAMS,MAChBF,UAAQ,KAGZ,yBAAKN,UAAU,gBACb,2BACEE,KAAK,WACLF,UAAU,mBACVG,YAAY,YACZC,SAAUL,EAAMU,SAChBH,UAAQ,KAGZ,yBAAKN,UAAU,oBACb,yBAAKA,UAAU,iBACb,2BAAOE,KAAK,WAAWF,UAAU,oBAEnC,yBAAKA,UAAU,iCACb,gDAGJ,kBAAC,IAAD,CAASU,GAAG,IAAIC,gBAAgB,UAC9B,4BAAQX,UAAU,MAAMY,QAASb,EAAMgB,QAAvC,YAIF,yBAAKf,UAAU,wBACb,yBAAKA,UAAU,yBAAf,oBACA,yBAAKA,UAAU,yBAAf,mCAIF,yBAAKA,UAAU,eACZ,IACD,0BAAMA,UAAU,cAAhB,yC,OCgESgB,E,4MA5GbC,MAAQ,G,EAERC,SAAW,SAACC,GACV,IAAId,EAAOe,SAASC,cAAc,eAC9BC,EAAOH,EAAEI,OAAOC,MAChBF,EAAKG,QAAU,GACjBpB,EAAKqB,MAAQ,6BACb,EAAKC,SAAS,CACZtB,KAAMiB,KAGRjB,EAAKqB,MAAQ,8B,EAGjBE,aAAe,SAACT,GACd,IAAIU,EAAWT,SAASC,cAAc,mBAClCC,EAAOH,EAAEI,OAAOC,MAChBF,EAAKG,QAAU,GACjBI,EAASH,MAAQ,6BACjB,EAAKC,SAAS,CACZpB,SAAUe,KAGZO,EAASH,MAAQ,8B,EAGrBI,UAAY,SAACX,GACX,IAAIX,EAAQY,SAASC,cAAc,UAC/BC,EAAOH,EAAEI,OAAOC,MAChB,EAAKO,QAAQT,IACfd,EAAMkB,MAAQ,8BACd,EAAKC,SAAS,CACZnB,MAAOc,KAGTd,EAAMkB,MAAQ,+B,EAGlBK,QAAU,SAACvB,GACT,MAAQ,yJAAyJwB,KAC/JxB,I,EAGJyB,aAAe,SAACd,GACd,IAAIV,EAAWW,SAASC,cAAc,aAClCC,EAAOH,EAAEI,OAAOC,MAChB,EAAKU,WAAWZ,IAClBb,EAASiB,MAAQ,8BACjB,EAAKC,SAAS,CACZlB,SAAUa,KAGZb,EAASiB,MAAQ,+B,EAGrBQ,WAAa,SAACzB,GACZ,MAAQ,0CAA0CuB,KAAKvB,I,EAEzD0B,UAAY,SAAChB,GACX,IAAIiB,EAAaC,KAAKC,UAAU,EAAKrB,OACrCsB,aAAaC,QAAQ,QAASJ,GAC9B,EAAKT,SAAS,CACZc,UAAW,EAAKxB,MAAMwB,Y,EAG1BC,SAAW,SAACvB,GACV,EAAKQ,SAAS,CACZgB,OAAQxB,EAAEI,OAAOC,S,EAIrBoB,YAAc,SAACzB,GACb,EAAKQ,SAAS,CACZkB,UAAW1B,EAAEI,OAAOC,S,EAGxBsB,WAAa,WACX,IAAIC,EAAQV,KAAKW,MAAMT,aAAaU,QAAQ,UACxC,EAAKhC,MAAM0B,SAAWI,EAAMvC,OAAS,EAAKS,MAAM4B,YAAcE,EAAMtC,UAAY,EAAKQ,MAAM0B,OAAOlB,OAAS,EAC7GyB,MAAMH,EAAM1C,KAAO,sBAEnB6C,MAAM,8D,uDAIR,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,CACE/C,KAAMgD,KAAKnC,SACXX,SAAU8C,KAAKzB,aACfpB,MAAO6C,KAAKvB,UACZrB,SAAU4C,KAAKpB,aACfpB,IAAKwC,KAAKlB,aAGd,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,UAChB,kBAAC,EAAD,CACE5C,MAAO6C,KAAKX,SACZjC,SAAU4C,KAAKT,YACf7B,OAAQsC,KAAKP,mB,GArGJQ,aCINC,MAJf,WACE,OAAO,kBAAC,EAAD,OCMWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOV,KAAK,IAAIW,UAAWR,KAE7BnC,SAAS4C,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ced1146f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport \"./signUp.css\";\nimport { NavLink } from \"react-router-dom\";\n\nconst SignUpRender = (props) => (\n  <div className=\"form\" id=\"form\">\n    <div className=\"top-bar\">\n      <div className=\"img-wrapper\"></div>\n      <span className=\"title\">Sign up</span>\n    </div>\n    <div className=\"mid-bar\">\n      <div className=\"mid-bar-top\">\n        <div className=\"first-input\">\n          <input\n            type=\"text\"\n            className=\"name-input inputs\"\n            placeholder=\"First name*\"\n            onChange={props.name}\n            required\n          ></input>\n        </div>\n        <div className=\"second-input\">\n          <input\n            type=\"text\"\n            className=\"surename-input inputs\"\n            placeholder=\"Last name*\"\n            onChange={props.sureName}\n            required\n          ></input>\n        </div>\n      </div>\n      <div className=\"third-input\">\n        <input\n          type=\"email\"\n          className=\"inputs-mid email\"\n          placeholder=\"Email Address*\"\n          onChange={props.email}\n          required\n        ></input>\n      </div>\n      <div className=\"fourth-input\">\n        <input\n          type=\"password\"\n          className=\"inputs-mid password\"\n          placeholder=\"Password*\"\n          onChange={props.password}\n          required\n        ></input>\n      </div>\n    </div>\n    <div className=\"bot-bar\">\n      <div className=\"top-cont\">\n        <div className=\"checkbox-cont\">\n          <input type=\"checkbox\" className=\"checkbox-input\" />\n        </div>\n        <div className=\"checkbox-discription\">\n          <span>\n            I want to receive inspiration, marketing\n            <br />\n            promotions and updates via email.\n          </span>\n        </div>\n      </div>\n      <NavLink to=\"/about\" activeClassName=\"active\">\n        <button className=\"btn\" onClick={props.btn}>\n          SIGN UP\n        </button>\n      </NavLink>\n\n      <div className=\"already-wrap\">\n        <span className=\"already-parag\">Already have an account? Sign in</span>\n      </div>\n      <div className=\"rights-wrap\">\n        {\" \"}\n        <span className=\"copy-right\">Copyright © Your Website 2020.</span>\n      </div>\n    </div>\n  </div>\n);\nexport default SignUpRender;\n","import React from \"react\";\nimport \"./signIn.css\";\nimport { NavLink } from \"react-router-dom\";\n\nconst SignInRender = (props) => (\n  <div className=\"signIn-cont\">\n    {\" \"}\n    <div className=\"sign-in-top-bar\">\n      <div className=\"img-wrapper\"></div>\n      <span className=\"title\">Sign in</span>\n    </div>{\" \"}\n    <div className=\"third-input\">\n      <input\n        type=\"email\"\n        className=\"email-sign-in\"\n        placeholder=\"Email Address*\"\n        onChange={props.email}\n        required\n      ></input>\n    </div>\n    <div className=\"fourth-input\">\n      <input\n        type=\"password\"\n        className=\"password-sign-in\"\n        placeholder=\"Password*\"\n        onChange={props.password}\n        required\n      ></input>\n    </div>\n    <div className=\"remember-me-wrap\">\n      <div className=\"checkbox-cont\">\n        <input type=\"checkbox\" className=\"checkbox-input\" />\n      </div>\n      <div className=\"sign-in-checkbox-discription \">\n        <span>Remember me!</span>\n      </div>\n    </div>\n    <NavLink to=\"/\" activeClassName=\"active\">\n      <button className=\"but\" onClick={props.button}>\n        SIGN IN\n      </button>\n    </NavLink>\n    <div className=\"forgot-password-wrap\">\n      <div className=\"forgot-password-items\">Forgot password?</div>\n      <div className=\"forgot-password-items\">\n        Don`t have an account? Sign up\n      </div>\n    </div>\n    <div className=\"rights-wrap\">\n      {\" \"}\n      <span className=\"copy-right\">Copyright © Your Website 2020.</span>\n    </div>\n  </div>\n);\nexport default SignInRender;\n","import React, { Component } from \"react\";\nimport SignUpRender from \"../signUp/signUp-render\";\nimport SignInRender from \"../signIn/signIn-render\";\nimport { Route, Switch } from \"react-router-dom\";\n\nclass SignUp extends Component {\n  state = {};\n\n  saveName = (e) => {\n    let name = document.querySelector(\".name-input\");\n    let word = e.target.value;\n    if (word.length >= 3) {\n      name.style = \"border: 2px solid #03f315;\";\n      this.setState({\n        name: word,\n      });\n    } else {\n      name.style = \"border: 2px solid #ff0404;\";\n    }\n  };\n  saveSureName = (e) => {\n    let surename = document.querySelector(\".surename-input\");\n    let word = e.target.value;\n    if (word.length >= 3) {\n      surename.style = \"border: 2px solid #03f315;\";\n      this.setState({\n        sureName: word,\n      });\n    } else {\n      surename.style = \"border: 2px solid #ff0404;\";\n    }\n  };\n  saveEmail = (e) => {\n    let email = document.querySelector(\".email\");\n    let word = e.target.value;\n    if (this.isEmail(word)) {\n      email.style = \" border: 2px solid #03f315;\";\n      this.setState({\n        email: word,\n      });\n    } else {\n      email.style = \" border: 2px solid #ff0404;\";\n    }\n  };\n  isEmail = (email) => {\n    return (/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(\n      email\n    ))\n  };\n  savePassword = (e) => {\n    let password = document.querySelector(\".password\");\n    let word = e.target.value;\n    if (this.isPassword(word)) {\n      password.style = \" border: 2px solid #03f315;\";\n      this.setState({\n        password: word,\n      });\n    } else {\n      password.style = \" border: 2px solid #ff0404;\";\n    }\n  };\n  isPassword = (password) => {\n    return (/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,20}$/.test(password));\n  };\n  saveLocal = (e) => {\n    let localState = JSON.stringify(this.state);\n    localStorage.setItem(\"State\", localState);\n    this.setState({\n      isActive: !this.state.isActive,\n    });\n  };\n  getEmail = (e) => {\n    this.setState({\n      email2: e.target.value,\n    });\n    \n  };\n  getPassword = (e) => {\n    this.setState({\n      password2: e.target.value,\n    });\n  };\n  validation = () => {\n    let local = JSON.parse(localStorage.getItem(\"State\"));\n    if (this.state.email2 === local.email && this.state.password2 === local.password && this.state.email2.length > 0){\n      alert(local.name + \" you have loged in\");\n    } else {\n      alert(\"you didn`t logged in, please check your email or password\");\n    }\n  };\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/\">\n          <SignUpRender\n            name={this.saveName}\n            sureName={this.saveSureName}\n            email={this.saveEmail}\n            password={this.savePassword}\n            btn={this.saveLocal}\n          />\n        </Route>\n        <Route exact path=\"/about\">\n          <SignInRender\n            email={this.getEmail}\n            password={this.getPassword}\n            button={this.validation}\n          />\n        </Route>\n      </Switch>\n    );\n  }\n}\n\nexport default SignUp;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Form from \"./form/form\";\n\nfunction App() {\n  return <Form />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <Route path=\"/\" component={App} />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}